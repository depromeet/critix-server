name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    environment: production
    permissions:
      contents: write

    steps:
      - name: "레포지토리에서 체크아웃한다."
        uses: actions/checkout@v4

      - name: "브랜치에서 버전 정보를 추출한다."
        run: echo "##[set-output name=version;]$(echo '${{ github.ref }}' | egrep -o 'release/([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})' | sed 's/release\///')"
        id: extract_version_name
        if: ${{ github.event_name != 'workflow_dispatch' }}

      - name: "릴리즈 태그를 생성한다."
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version_name.outputs.version }}
          release_name: ${{ steps.extract_version_name.outputs.version }}
        if: ${{ github.event_name != 'workflow_dispatch' }}

      - name: "JDK 21을 설정한다."
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: "Gradle 설정을 진행한다."
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true

      - name: "Gradle 빌드를 실행한다."
        run: ./gradlew clean build -x test

      - name: "도커에 로그인한다."
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "도커 허브에 빌드된 이미지를 푸시한다."
        run: |
          VERSION=${{ steps.extract_version_name.outputs.version }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/critix-server:$VERSION .
          docker tag ${{ secrets.DOCKER_USERNAME }}/critix-server:$VERSION ${{ secrets.DOCKER_USERNAME }}/critix-server:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/critix-server:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/critix-server:latest

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: "레포지토리에서 체크아웃한다."
        uses: actions/checkout@v4

      - name: "docker-compose.yml을 scp 전송한다."
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USERNAME }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          port: ${{ secrets.NCP_SERVER_PORT }}
          source: "infra/production/docker/docker-compose.yml, infra/production/docker/kafka-docker-compose.yml"
          target: ${{ secrets.COMPOSE_PATH }}
          strip_components: 3

      - name: "애플리케이션 서버를 구동한다."
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USERNAME }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          port: ${{ secrets.NCP_SERVER_PORT }}
          script: |
            docker-compose -f ${{ secrets.COMPOSE_PATH }}/docker-compose.yml -f ${{ secrets.COMPOSE_PATH }}/kafka-docker-compose.yml pull
            docker-compose -f ${{ secrets.COMPOSE_PATH }}/docker-compose.yml -f ${{ secrets.COMPOSE_PATH }}/kafka-docker-compose.yml --env-file ${{ secrets.ENV_PATH }} up -d
            

  check:
    needs: deploy
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: "애플리케이션 서버 정상 동작 여부를 점검한다."
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.HEALTH_CHECK_ENDPOINT }}
          max-attempts: 3
          retry-delay: 1s

      - name: "최근 3개 이미지를 제외한 도커 이미지를 삭제한다."
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | \
              grep '${{ secrets.DOCKER_USERNAME }}/critix-server' | \
              sort -r | \
              tail -n +4 | \
              awk '{print $2}' | \
              xargs -r docker rmi -f

      - name: "슬랙에 배포 성공 여부 알림을 전송한다."
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Production Deployment
          fields: repo,message,commit,author,eventName,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEB_HOOK_URL }}
        if: always()
